"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/admin/raffles/page",{

/***/ "(app-pages-browser)/./lib/admin-api.ts":
/*!**************************!*\
  !*** ./lib/admin-api.ts ***!
  \**************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   adminApi: function() { return /* binding */ adminApi; }\n/* harmony export */ });\n/* harmony import */ var _hooks_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/hooks/api */ \"(app-pages-browser)/./hooks/api.ts\");\n\nconst adminApi = {\n    // Get admin statistics\n    async getAdminStats () {\n        return (0,_hooks_api__WEBPACK_IMPORTED_MODULE_0__.apiCall)(\"/api/admin/stats\");\n    },\n    // Get all raffles\n    async listAllRaffles () {\n        const response = await (0,_hooks_api__WEBPACK_IMPORTED_MODULE_0__.apiCall)(\"/api/admin/raffles\");\n        // Add soldTickets field by calculating from tickets table\n        const rafflesWithSoldTickets = await Promise.all(response.raffles.map(async (raffle)=>{\n            try {\n                const soldTicketsResponse = await (0,_hooks_api__WEBPACK_IMPORTED_MODULE_0__.apiCall)(\"/api/raffles/\".concat(raffle.id, \"/available-tickets\"));\n                return {\n                    ...raffle,\n                    soldTickets: raffle.totalTickets - (soldTicketsResponse.soldTickets || 0)\n                };\n            } catch (e) {\n                // If we can't get sold tickets, default to 0\n                return {\n                    ...raffle,\n                    soldTickets: 0\n                };\n            }\n        }));\n        return {\n            raffles: rafflesWithSoldTickets\n        };\n    },\n    // Create new raffle\n    async createRaffle (raffleData) {\n        return (0,_hooks_api__WEBPACK_IMPORTED_MODULE_0__.apiCall)(\"/api/admin/raffles\", {\n            method: \"POST\",\n            body: JSON.stringify(raffleData)\n        });\n    },\n    // Update raffle\n    async updateRaffle (raffleId, raffleData) {\n        return (0,_hooks_api__WEBPACK_IMPORTED_MODULE_0__.apiCall)(\"/api/admin/raffles/\".concat(raffleId), {\n            method: \"PUT\",\n            body: JSON.stringify(raffleData)\n        });\n    },\n    // Delete raffle\n    async deleteRaffle (raffleId) {\n        return (0,_hooks_api__WEBPACK_IMPORTED_MODULE_0__.apiCall)(\"/api/admin/raffles/\".concat(raffleId), {\n            method: \"DELETE\"\n        });\n    },\n    // Get pending payments\n    async getPendingPayments () {\n        return (0,_hooks_api__WEBPACK_IMPORTED_MODULE_0__.apiCall)(\"/api/admin/payments/pending\");\n    },\n    // Confirm payment\n    async confirmPayment (params) {\n        return (0,_hooks_api__WEBPACK_IMPORTED_MODULE_0__.apiCall)(\"/api/admin/tickets/\".concat(params.ticketId, \"/confirm\"), {\n            method: \"PUT\"\n        });\n    },\n    // Update raffle status\n    async updateRaffleStatus (params) {\n        return (0,_hooks_api__WEBPACK_IMPORTED_MODULE_0__.apiCall)(\"/api/admin/raffles/\".concat(params.raffleId, \"/status\"), {\n            method: \"PUT\",\n            body: JSON.stringify({\n                status: params.status\n            })\n        });\n    },\n    // Assign winner\n    async assignWinner (winnerData) {\n        return (0,_hooks_api__WEBPACK_IMPORTED_MODULE_0__.apiCall)(\"/api/admin/winners\", {\n            method: \"POST\",\n            body: JSON.stringify(winnerData)\n        });\n    },\n    // Get winners\n    async getWinners () {\n        return (0,_hooks_api__WEBPACK_IMPORTED_MODULE_0__.apiCall)(\"/api/admin/winners\");\n    },\n    // Get users (for now we'll create a mock endpoint)\n    async getUsers () {\n        // Since there's no API endpoint for users yet, we'll return mock data\n        const mockUsers = [\n            {\n                id: 1,\n                name: \"Mar\\xeda Gonz\\xe1lez\",\n                email: \"maria.gonzalez@email.com\",\n                phone: \"+1234567890\",\n                country: \"Venezuela\",\n                city: \"Caracas\",\n                totalTickets: 15,\n                totalSpent: 375,\n                lastPurchase: \"2024-01-15T00:00:00Z\",\n                status: \"active\",\n                createdAt: \"2023-12-01T00:00:00Z\"\n            },\n            {\n                id: 2,\n                name: \"Carlos Rodr\\xedguez\",\n                email: \"carlos.rodriguez@email.com\",\n                phone: \"+1987654321\",\n                country: \"Colombia\",\n                city: \"Bogot\\xe1\",\n                totalTickets: 8,\n                totalSpent: 280,\n                lastPurchase: \"2024-01-14T00:00:00Z\",\n                status: \"active\",\n                createdAt: \"2023-11-15T00:00:00Z\"\n            },\n            {\n                id: 3,\n                name: \"Ana Mart\\xednez\",\n                email: \"ana.martinez@email.com\",\n                phone: \"+1122334455\",\n                country: \"M\\xe9xico\",\n                city: \"Ciudad de M\\xe9xico\",\n                totalTickets: 22,\n                totalSpent: 550,\n                lastPurchase: \"2024-01-13T00:00:00Z\",\n                status: \"active\",\n                createdAt: \"2023-10-20T00:00:00Z\"\n            },\n            {\n                id: 4,\n                name: \"Luis P\\xe9rez\",\n                email: \"luis.perez@email.com\",\n                phone: \"+1555666777\",\n                country: \"Espa\\xf1a\",\n                city: \"Madrid\",\n                totalTickets: 3,\n                totalSpent: 75,\n                lastPurchase: \"2024-01-10T00:00:00Z\",\n                status: \"inactive\",\n                createdAt: \"2023-09-05T00:00:00Z\"\n            }\n        ];\n        return Promise.resolve({\n            users: mockUsers\n        });\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/admin-api.ts\n"));

/***/ })

});